use std::collections::HashMap;
use std::fs::File;
use std::io::{self, BufRead};
struct WordCount {
    word: String,
    count: usize,
}
fn main() {
    let file = File::open("D:\\facultate\\Anul_2\\Rust\\lab08\\file.txt.txt").unwrap();
    let mut word_map: HashMap<String, usize> = HashMap::new();

    for line in io::BufReader::new(file).lines() {
        let line = line.unwrap();
        let words: Vec<&str> = line.split(|c: char| !c.is_alphanumeric()).collect();

        for word in words {
            if word.is_empty() {
                continue;
            }

            let word_lowercase = word.to_lowercase();
            *word_map.entry(word_lowercase).or_insert(0) += 1;
        }
    }

    let mut word_vec = Vec::new();
    for (word, count) in word_map {
        word_vec.push(WordCount { word, count });
    }

    word_vec.sort_by(|a, b| b.count.cmp(&a.count));

    for word_count in word_vec {
        println!("{:<10} => {}", word_count.word, word_count.count);
    }
}

